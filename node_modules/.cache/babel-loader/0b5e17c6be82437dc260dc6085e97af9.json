{"ast":null,"code":"var _jsxFileName = \"/home/monia/react-pokemons-app/src/components/pokemon-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\nconst PokemonForm = ({\n  pokemon,\n  isEditForm\n}) => {\n  const history = useHistory();\n  const [form, setForm] = useState({\n    picture: {\n      value: pokemon.picture\n    },\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      const newField = {\n        value: newTypes\n      };\n      setForm({ ...form,\n        ...{\n          types: newField\n        }\n      });\n    } else {\n      // Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      const newField = {\n        value: newTypes\n      };\n      setForm({ ...form,\n        ...{\n          types: newField\n        }\n      }); //   }\n      // }\n      //  const handleSubmit = (e: React.ChangeEvent<HTMLInputElement>) => {\n      //    e.preventDefault();\n      //    const isFormValid = validateForm();\n      //    if(isFormValid) {\n      //     pokemon.name = form.name.value;\n      //     pokemon.hp = form.hp.value;\n      //     pokemon.cp = form.cp.value;\n      //     pokemon.types = form.types.value;\n      //     PokemonService.updatePokemon(pokemon).then(() => history.push('/pokemons/${pokemon.id}'));\n      //    }\n      //    }\n\n      const isAddForm = () => {\n        return !isEditForm;\n      };\n\n      const validateForm = () => {\n        let newForm = form;\n\n        if (isAddForm()) {\n          const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n          const end = \".png\";\n\n          if (!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n            const errorMsg = \"L'url n'est pas valide.\";\n            const newField = {\n              value: form.picture.value,\n              error: errorMsg,\n              isValid: false\n            };\n            newForm = { ...form,\n              ...{\n                picture: newField\n              }\n            };\n          } else {\n            const newField = {\n              value: form.picture.value,\n              error: '',\n              isValid: true\n            };\n            newForm = { ...form,\n              ...{\n                picture: newField\n              }\n            };\n          }\n        } // Validator name\n\n\n        if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n          const errorMsg = 'Le nom du pokémon est requis (1-25).';\n          const newField = {\n            value: form.name.value,\n            error: errorMsg,\n            isValid: false\n          };\n          newForm = { ...newForm,\n            ...{\n              name: newField\n            }\n          };\n        } else {\n          const newField = {\n            value: form.name.value,\n            error: '',\n            isValid: true\n          };\n          newForm = { ...newForm,\n            ...{\n              name: newField\n            }\n          };\n        } // Validator hp\n\n\n        if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n          const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n          const newField = {\n            value: form.hp.value,\n            error: errorMsg,\n            isValid: false\n          };\n          newForm = { ...newForm,\n            ...{\n              hp: newField\n            }\n          };\n        } else {\n          const newField = {\n            value: form.hp.value,\n            error: '',\n            isValid: true\n          };\n          newForm = { ...newForm,\n            ...{\n              hp: newField\n            }\n          };\n        } // Validator cp\n\n\n        if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n          const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n          const newField = {\n            value: form.cp.value,\n            error: errorMsg,\n            isValid: false\n          };\n          newForm = { ...newForm,\n            ...{\n              cp: newField\n            }\n          };\n        } else {\n          const newField = {\n            value: form.cp.value,\n            error: '',\n            isValid: true\n          };\n          newForm = { ...newForm,\n            ...{\n              cp: newField\n            }\n          };\n        }\n\n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n      };\n\n      const isTypesValid = type => {\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n        if (form.types.value.length === 1 && hasType(type)) {\n          return false;\n        } // Cas n°1: Le pokémon a au moins 3 types.\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n        if (form.types.value.length >= 3 && !hasType(type)) {\n          return false;\n        } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n        return true;\n      };\n\n      const handleSubmit = e => {\n        e.preventDefault();\n        const isFormValid = validateForm();\n\n        if (isFormValid) {\n          pokemon.picture = form.picture.value;\n          pokemon.name = form.name.value;\n          pokemon.hp = form.hp.value;\n          pokemon.cp = form.cp.value;\n          pokemon.types = form.types.value;\n          isEditForm ? updatePokemon() : addPokemon();\n        }\n      };\n\n      const addPokemon = () => {\n        PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'));\n      };\n\n      const updatePokemon = () => {\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n      };\n\n      const deletePokemon = () => {\n        PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\n      };\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col s12 m8 offset-m2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card hoverable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }, isEditForm && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 14\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: pokemon.picture,\n        alt: pokemon.name,\n        style: {\n          width: '250px',\n          margin: '0 auto'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 16\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"btn-floating halfway-fab wawes-effect wawes-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        onClick: deletePokemon,\n        className: \"material-icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 18\n        }\n      }, \"delete\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-stacked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 18\n        }\n      }, \"Image\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"picture\",\n        type: \"text\",\n        name: \"picture\",\n        className: \"form-control\",\n        value: form.picture.value,\n        onChange: e => handleInputChange(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 14\n        }\n      }), form.picture.error && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-panel red accent-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 14\n        }\n      }, form.picture.error)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 19\n        }\n      }, \"Nom\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"name\",\n        type: \"text\",\n        name: \"name\",\n        className: \"form-control\",\n        value: form.name.value,\n        onChange: e => handleInputChange(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 19\n        }\n      }), form.name.error && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-panel red accent-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 19\n        }\n      }, form.name.error)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"hp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 19\n        }\n      }, \"Point de vie\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"hp\",\n        type: \"number\",\n        name: \"hp\",\n        className: \"form-control\",\n        value: form.hp.value,\n        onChange: e => handleInputChange(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 19\n        }\n      }), form.hp.error && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-panel red accent-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 19\n        }\n      }, form.hp.error)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"cp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 19\n        }\n      }, \"D\\xE9g\\xE2ts\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"cp\",\n        type: \"number\",\n        name: \"cp\",\n        className: \"form-control\",\n        value: form.cp.value,\n        onChange: e => handleInputChange(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 19\n        }\n      }), form.cp.error && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-panel red accent-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 19\n        }\n      }, form.cp.error)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 19\n        }\n      }, \"Types\"), types.map(type => /*#__PURE__*/React.createElement(\"div\", {\n        key: type,\n        style: {\n          marginBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        id: type,\n        type: \"checkbox\",\n        name: \"types\",\n        className: \"filled-in\",\n        value: type,\n        disabled: !isTypesValid(type),\n        checked: hasType(type),\n        onChange: e => selectType(type, e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: formatType(type),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 27\n        }\n      }, type))))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-action center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }\n      }, \"Valider\")))))));\n    }\n  };\n};\n\nexport default PokemonForm;","map":{"version":3,"sources":["/home/monia/react-pokemons-app/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonService","PokemonForm","pokemon","isEditForm","history","form","setForm","picture","value","name","isValid","hp","cp","types","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","isAddForm","validateForm","newForm","start","end","startsWith","endsWith","errorMsg","error","test","isTypesValid","length","handleSubmit","preventDefault","isFormValid","updatePokemon","addPokemon","then","push","id","deletePokemon","width","margin","map","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;AAqBA,MAAMC,WAAqC,GAAG,CAAC;AAACC,EAAAA,OAAD;AAASC,EAAAA;AAAT,CAAD,KAA0B;AAEtE,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AAEA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAO;AACrCU,IAAAA,OAAO,EAAE;AAACC,MAAAA,KAAK,EAAEN,OAAO,CAACK;AAAhB,KAD4B;AAErCE,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAEN,OAAO,CAACO,IAAjB;AAAuBC,MAAAA,OAAO,EAAE;AAAhC,KAF+B;AAGrCC,IAAAA,EAAE,EAAE;AAAEH,MAAAA,KAAK,EAAEN,OAAO,CAACS,EAAjB;AAAqBD,MAAAA,OAAO,EAAE;AAA9B,KAHiC;AAIrCE,IAAAA,EAAE,EAAE;AAAEJ,MAAAA,KAAK,EAAEN,OAAO,CAACU,EAAjB;AAAqBF,MAAAA,OAAO,EAAE;AAA9B,KAJiC;AAKrCG,IAAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAAEN,OAAO,CAACW,KAAjB;AAAwBH,MAAAA,OAAO,EAAE;AAAjC;AAL8B,GAAP,CAAhC;AAQA,QAAMG,KAAe,GAAG,CACtB,QADsB,EACZ,KADY,EACL,KADK,EACE,SADF,EACa,QADb,EACuB,UADvB,EAEtB,QAFsB,EAEZ,MAFY,EAEJ,KAFI,EAEG,QAFH,EAEa,KAFb,CAAxB;;AAKA,QAAMC,OAAO,GAAIC,IAAD,IAA2B;AACzC,WAAOV,IAAI,CAACQ,KAAL,CAAWL,KAAX,CAAiBQ,QAAjB,CAA0BD,IAA1B,CAAP;AACD,GAFD;;AAGA,QAAME,iBAAiB,GAAIC,CAAD,IAA4C;AACpE,UAAMC,SAAiB,GAAGD,CAAC,CAACE,MAAF,CAASX,IAAnC;AACA,UAAMY,UAAkB,GAAGH,CAAC,CAACE,MAAF,CAASZ,KAApC;AACA,UAAMc,QAAe,GAAG;AAAE,OAACH,SAAD,GAAa;AAAEX,QAAAA,KAAK,EAAEa;AAAT;AAAf,KAAxB;AAEAf,IAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,SAAGiB;AAAb,KAAD,CAAP;AACD,GAND;;AAQA,QAAMC,UAAU,GAAG,CAACR,IAAD,EAAeG,CAAf,KAAgE;AACjF,UAAMM,OAAO,GAAGN,CAAC,CAACE,MAAF,CAASI,OAAzB;AACA,QAAIF,QAAJ;;AAEA,QAAGE,OAAH,EAAY;AACV;AACA,YAAMC,QAAkB,GAAGpB,IAAI,CAACQ,KAAL,CAAWL,KAAX,CAAiBkB,MAAjB,CAAwB,CAACX,IAAD,CAAxB,CAA3B;AACA,YAAMO,QAAe,GAAG;AAAEd,QAAAA,KAAK,EAAEiB;AAAT,OAAxB;AAEAnB,MAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,WAAG;AAAEQ,UAAAA,KAAK,EAAES;AAAT;AAAb,OAAD,CAAP;AACD,KAND,MAMO;AACL;AACA,YAAMG,QAAkB,GAAGpB,IAAI,CAACQ,KAAL,CAAWL,KAAX,CAAiBmB,MAAjB,CAAyBC,WAAD,IAAyBA,WAAW,KAAKb,IAAjE,CAA3B;AACA,YAAMO,QAAe,GAAG;AAAEd,QAAAA,KAAK,EAAEiB;AAAT,OAAxB;AAEAnB,MAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,WAAG;AAAEQ,UAAAA,KAAK,EAAES;AAAT;AAAb,OAAD,CAAP,CALK,CAMT;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,YAAMO,SAAS,GAAG,MAAM;AACtB,eAAO,CAAC1B,UAAR;AAEC,OAHH;;AAMD,YAAM2B,YAAY,GAAG,MAAM;AACzB,YAAIC,OAAa,GAAG1B,IAApB;;AACA,YAAGwB,SAAS,EAAZ,EAAgB;AACd,gBAAMG,KAAK,GAAG,4DAAd;AACA,gBAAMC,GAAG,GAAG,MAAZ;;AACA,cAAG,CAAC5B,IAAI,CAACE,OAAL,CAAaC,KAAb,CAAmB0B,UAAnB,CAA8BF,KAA9B,CAAD,IAAyC,CAAC3B,IAAI,CAACE,OAAL,CAAaC,KAAb,CAAmB2B,QAAnB,CAA4BF,GAA5B,CAA7C,EAA+E;AAC7E,kBAAMG,QAAgB,GAAG,yBAAzB;AACA,kBAAMd,QAAe,GAAG;AAACd,cAAAA,KAAK,EAAEH,IAAI,CAACE,OAAL,CAAaC,KAArB;AAA4B6B,cAAAA,KAAK,EAAED,QAAnC;AAA6C1B,cAAAA,OAAO,EAAE;AAAtD,aAAxB;AACAqB,YAAAA,OAAO,GAAG,EAAC,GAAG1B,IAAJ;AAAU,iBAAG;AAAEE,gBAAAA,OAAO,EAAEe;AAAX;AAAb,aAAV;AACD,WAJD,MAIO;AACL,kBAAMA,QAAe,GAAG;AAACd,cAAAA,KAAK,EAAEH,IAAI,CAACE,OAAL,CAAaC,KAArB;AAA4B6B,cAAAA,KAAK,EAAC,EAAlC;AAAsC3B,cAAAA,OAAO,EAAE;AAA/C,aAAxB;AACAqB,YAAAA,OAAO,GAAG,EAAC,GAAG1B,IAAJ;AAAU,iBAAG;AAAEE,gBAAAA,OAAO,EAAEe;AAAX;AAAb,aAAV;AACD;AAGF,SAfwB,CAiBzB;;;AACA,YAAG,CAAC,uBAAuBgB,IAAvB,CAA4BjC,IAAI,CAACI,IAAL,CAAUD,KAAtC,CAAJ,EAAkD;AAChD,gBAAM4B,QAAgB,GAAG,sCAAzB;AACA,gBAAMd,QAAe,GAAG;AAAEd,YAAAA,KAAK,EAAEH,IAAI,CAACI,IAAL,CAAUD,KAAnB;AAA0B6B,YAAAA,KAAK,EAAED,QAAjC;AAA2C1B,YAAAA,OAAO,EAAE;AAApD,WAAxB;AACAqB,UAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,eAAG;AAAEtB,cAAAA,IAAI,EAAEa;AAAR;AAAjB,WAAV;AACD,SAJD,MAIO;AACL,gBAAMA,QAAe,GAAG;AAAEd,YAAAA,KAAK,EAAEH,IAAI,CAACI,IAAL,CAAUD,KAAnB;AAA0B6B,YAAAA,KAAK,EAAE,EAAjC;AAAqC3B,YAAAA,OAAO,EAAE;AAA9C,WAAxB;AACAqB,UAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,eAAG;AAAEtB,cAAAA,IAAI,EAAEa;AAAR;AAAjB,WAAV;AACD,SAzBwB,CA2BzB;;;AACA,YAAG,CAAC,eAAegB,IAAf,CAAoBjC,IAAI,CAACM,EAAL,CAAQH,KAA5B,CAAJ,EAAwC;AACtC,gBAAM4B,QAAgB,GAAG,2DAAzB;AACA,gBAAMd,QAAe,GAAG;AAACd,YAAAA,KAAK,EAAEH,IAAI,CAACM,EAAL,CAAQH,KAAhB;AAAuB6B,YAAAA,KAAK,EAAED,QAA9B;AAAwC1B,YAAAA,OAAO,EAAE;AAAjD,WAAxB;AACAqB,UAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,eAAG;AAAEpB,cAAAA,EAAE,EAAEW;AAAN;AAAjB,WAAV;AACD,SAJD,MAIO;AACL,gBAAMA,QAAe,GAAG;AAAEd,YAAAA,KAAK,EAAEH,IAAI,CAACM,EAAL,CAAQH,KAAjB;AAAwB6B,YAAAA,KAAK,EAAE,EAA/B;AAAmC3B,YAAAA,OAAO,EAAE;AAA5C,WAAxB;AACAqB,UAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,eAAG;AAAEpB,cAAAA,EAAE,EAAEW;AAAN;AAAjB,WAAV;AACD,SAnCwB,CAqCzB;;;AACA,YAAG,CAAC,eAAegB,IAAf,CAAoBjC,IAAI,CAACO,EAAL,CAAQJ,KAA5B,CAAJ,EAAwC;AACtC,gBAAM4B,QAAgB,GAAG,kDAAzB;AACA,gBAAMd,QAAe,GAAG;AAACd,YAAAA,KAAK,EAAEH,IAAI,CAACO,EAAL,CAAQJ,KAAhB;AAAuB6B,YAAAA,KAAK,EAAED,QAA9B;AAAwC1B,YAAAA,OAAO,EAAE;AAAjD,WAAxB;AACAqB,UAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,eAAG;AAAEnB,cAAAA,EAAE,EAAEU;AAAN;AAAjB,WAAV;AACD,SAJD,MAIO;AACL,gBAAMA,QAAe,GAAG;AAAEd,YAAAA,KAAK,EAAEH,IAAI,CAACO,EAAL,CAAQJ,KAAjB;AAAwB6B,YAAAA,KAAK,EAAE,EAA/B;AAAmC3B,YAAAA,OAAO,EAAE;AAA5C,WAAxB;AACAqB,UAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,eAAG;AAAEnB,cAAAA,EAAE,EAAEU;AAAN;AAAjB,WAAV;AACD;;AAEDhB,QAAAA,OAAO,CAACyB,OAAD,CAAP;AACA,eAAOA,OAAO,CAACtB,IAAR,CAAaC,OAAb,IAAwBqB,OAAO,CAACpB,EAAR,CAAWD,OAAnC,IAA8CqB,OAAO,CAACnB,EAAR,CAAWF,OAAhE;AACD,OAjDD;;AAmDA,YAAM6B,YAAY,GAAIxB,IAAD,IAA2B;AAC9C;AACA;AACA,YAAIV,IAAI,CAACQ,KAAL,CAAWL,KAAX,CAAiBgC,MAAjB,KAA4B,CAA5B,IAAiC1B,OAAO,CAACC,IAAD,CAA5C,EAAoD;AAClD,iBAAO,KAAP;AACD,SAL6C,CAO9C;AACA;;;AACA,YAAIV,IAAI,CAACQ,KAAL,CAAWL,KAAX,CAAiBgC,MAAjB,IAA2B,CAA3B,IAAgC,CAAC1B,OAAO,CAACC,IAAD,CAA5C,EAAoD;AAClD,iBAAO,KAAP;AACD,SAX6C,CAa9C;AACA;;;AACA,eAAO,IAAP;AACD,OAhBD;;AAiBK,YAAM0B,YAAY,GAAIvB,CAAD,IAAyC;AAC9DA,QAAAA,CAAC,CAACwB,cAAF;AACH,cAAMC,WAAW,GAAGb,YAAY,EAAhC;;AACA,YAAGa,WAAH,EAAgB;AACdzC,UAAAA,OAAO,CAACK,OAAR,GAAkBF,IAAI,CAACE,OAAL,CAAaC,KAA/B;AACAN,UAAAA,OAAO,CAACO,IAAR,GAAeJ,IAAI,CAACI,IAAL,CAAUD,KAAzB;AACAN,UAAAA,OAAO,CAACS,EAAR,GAAaN,IAAI,CAACM,EAAL,CAAQH,KAArB;AACAN,UAAAA,OAAO,CAACU,EAAR,GAAaP,IAAI,CAACO,EAAL,CAAQJ,KAArB;AACAN,UAAAA,OAAO,CAACW,KAAR,GAAgBR,IAAI,CAACQ,KAAL,CAAWL,KAA3B;AACAL,UAAAA,UAAU,GAAGyC,aAAa,EAAhB,GAAqBC,UAAU,EAAzC;AACD;AACF,OAXI;;AAYL,YAAMA,UAAU,GAAG,MAAM;AACrB7C,QAAAA,cAAc,CAAC6C,UAAf,CAA0B3C,OAA1B,EAAmC4C,IAAnC,CAAwC,MAAM1C,OAAO,CAAC2C,IAAR,CAAa,WAAb,CAA9C;AACD,OAFH;;AAIA,YAAMH,aAAa,GAAG,MAAM;AAC5B5C,QAAAA,cAAc,CAAC4C,aAAf,CAA8B1C,OAA9B,EAAuC4C,IAAvC,CAA4C,MAAM1C,OAAO,CAAC2C,IAAR,CAAc,aAAY7C,OAAO,CAAC8C,EAAG,EAArC,CAAlD;AACD,OAFC;;AAIF,YAAMC,aAAa,GAAG,MAAM;AAC1BjD,QAAAA,cAAc,CAACiD,aAAf,CAA6B/C,OAA7B,EAAsC4C,IAAtC,CAA2C,MAAM1C,OAAO,CAAC2C,IAAR,CAAa,WAAb,CAAjD;AACD,OAFD;;AAKE,0BACE;AAAM,QAAA,QAAQ,EAAG7B,CAAD,IAAOuB,YAAY,CAACvB,CAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCf,UAAU,iBACR;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,GAAG,EAAED,OAAO,CAACK,OAAlB;AAA2B,QAAA,GAAG,EAAEL,OAAO,CAACO,IAAxC;AAA8C,QAAA,KAAK,EAAE;AAACyC,UAAAA,KAAK,EAAE,OAAR;AAAiBC,UAAAA,MAAM,EAAE;AAAzB,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAM,QAAA,SAAS,EAAC,mDAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,OAAO,EAAEF,aAAZ;AAA2B,QAAA,SAAS,EAAC,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAFF,CAFH,eAWE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,eAEH;AAAO,QAAA,EAAE,EAAC,SAAV;AAAoB,QAAA,IAAI,EAAC,MAAzB;AAAgC,QAAA,IAAI,EAAC,SAArC;AAA+C,QAAA,SAAS,EAAC,cAAzD;AAAwE,QAAA,KAAK,EAAE5C,IAAI,CAACE,OAAL,CAAaC,KAA5F;AAAmG,QAAA,QAAQ,EAAEU,CAAC,IAAID,iBAAiB,CAACC,CAAD,CAAnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFG,EAIDb,IAAI,CAACE,OAAL,CAAa8B,KAAb,iBACF;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGhC,IAAI,CAACE,OAAL,CAAa8B,KADhB,CALG,CAFF,eAYC;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADH,eAEG;AAAO,QAAA,EAAE,EAAC,MAAV;AAAiB,QAAA,IAAI,EAAC,MAAtB;AAA6B,QAAA,IAAI,EAAC,MAAlC;AAAyC,QAAA,SAAS,EAAC,cAAnD;AAAkE,QAAA,KAAK,EAAEhC,IAAI,CAACI,IAAL,CAAUD,KAAnF;AAA0F,QAAA,QAAQ,EAAEU,CAAC,IAAID,iBAAiB,CAACC,CAAD,CAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAIIb,IAAI,CAACI,IAAL,CAAU4B,KAAV,iBACD;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEhC,IAAI,CAACI,IAAL,CAAU4B,KADZ,CALH,CAZD,eAsBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAO,QAAA,EAAE,EAAC,IAAV;AAAe,QAAA,IAAI,EAAC,QAApB;AAA6B,QAAA,IAAI,EAAC,IAAlC;AAAuC,QAAA,SAAS,EAAC,cAAjD;AAAgE,QAAA,KAAK,EAAEhC,IAAI,CAACM,EAAL,CAAQH,KAA/E;AAAsF,QAAA,QAAQ,EAAEU,CAAC,IAAKD,iBAAiB,CAACC,CAAD,CAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAIGb,IAAI,CAACM,EAAL,CAAQ0B,KAAR,iBACD;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEhC,IAAI,CAACM,EAAL,CAAQ0B,KADV,CALF,CAtBF,eAgCE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAO,QAAA,EAAE,EAAC,IAAV;AAAe,QAAA,IAAI,EAAC,QAApB;AAA6B,QAAA,IAAI,EAAC,IAAlC;AAAuC,QAAA,SAAS,EAAC,cAAjD;AAAgE,QAAA,KAAK,EAAEhC,IAAI,CAACO,EAAL,CAAQJ,KAA/E;AAAsF,QAAA,QAAQ,EAAEU,CAAC,IAAKD,iBAAiB,CAACC,CAAD,CAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAIGb,IAAI,CAACO,EAAL,CAAQyB,KAAR,iBACD;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEhC,IAAI,CAACO,EAAL,CAAQyB,KADV,CALF,CAhCF,eA0CE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEGxB,KAAK,CAACuC,GAAN,CAAUrC,IAAI,iBACb;AAAK,QAAA,GAAG,EAAEA,IAAV;AAAgB,QAAA,KAAK,EAAE;AAACsC,UAAAA,YAAY,EAAE;AAAf,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,EAAE,EAAEtC,IAAX;AAAiB,QAAA,IAAI,EAAC,UAAtB;AAAiC,QAAA,IAAI,EAAC,OAAtC;AAA8C,QAAA,SAAS,EAAC,WAAxD;AAAoE,QAAA,KAAK,EAAEA,IAA3E;AAAiF,QAAA,QAAQ,EAAG,CAACwB,YAAY,CAACxB,IAAD,CAAzG;AAAgH,QAAA,OAAO,EAAED,OAAO,CAACC,IAAD,CAAhI;AAAwI,QAAA,QAAQ,EAAEG,CAAC,IAAIK,UAAU,CAACR,IAAD,EAAOG,CAAP,CAAjK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,SAAS,EAAEnB,UAAU,CAACgB,IAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCA,IAAlC,CADF,CAFF,CADF,CADD,CAFH,CA1CF,CADF,eAyDE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CAzDF,CAXF,CADF,CADF,CADF,CADF;AAkFE;AAAC,GAnNH;AAmNK,CA/OP;;AAiPA,eAAed,WAAf","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\ntype Props = {\n  pokemon: Pokemon\n  isEditForm: boolean\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean\n};\n\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon,isEditForm}) => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    picture: {value: pokemon.picture},\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true }\n  });\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const hasType = (type: string): boolean => {\n    return form.types.value.includes(type);\n  }\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue}};\n\n    setForm({...form, ...newField});\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.concat([type]);\n      const newField: Field = { value: newTypes };\n\n      setForm({...form, ...{ types: newField }});\n    } else {\n      // Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      const newField: Field = { value: newTypes };\n\n      setForm({...form, ...{ types: newField }});\n  //   }\n  // }\n\n  //  const handleSubmit = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //    e.preventDefault();\n  //    const isFormValid = validateForm();\n  //    if(isFormValid) {\n  //     pokemon.name = form.name.value;\n  //     pokemon.hp = form.hp.value;\n  //     pokemon.cp = form.cp.value;\n  //     pokemon.types = form.types.value;\n  //     PokemonService.updatePokemon(pokemon).then(() => history.push('/pokemons/${pokemon.id}'));\n  //    }\n  //    }\n   const isAddForm = () => {\n     return !isEditForm; \n\n     }\n   \n\n  const validateForm = () => {\n    let newForm: Form = form;\n    if(isAddForm()) {\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n      const end = \".png\";\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n        const errorMsg: string = \"L'url n'est pas valide.\";\n        const newField: Field = {value: form.picture.value, error: errorMsg, isValid: false};\n        newForm = {...form, ...{ picture: newField }};\n      } else {\n        const newField: Field = {value: form.picture.value, error:'', isValid: true};\n        newForm = {...form, ...{ picture: newField }};\n      }\n\n\n    }\n    \n    // Validator name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n       const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n       e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      pokemon.picture = form.picture.value;\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      isEditForm ? updatePokemon() : addPokemon();\n    }\n  }\n  const addPokemon = () => {\n      PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'));\n    }\n    \n  const updatePokemon = () => {\n  PokemonService.updatePokemon (pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n}\n\nconst deletePokemon = () => {\n  PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\n}  \n\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n          {isEditForm && (\n             <div className=\"card-image\">\n               <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n               <span className=\"btn-floating halfway-fab wawes-effect wawes-light\">\n                 <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n               </span>\n            \n             \n           </div>\n          )}\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                <div className=\"form-group\">\n                 <label htmlFor=\"name\">Image</label>\n             <input id=\"picture\" type=\"text\" name=\"picture\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n             {/* error */}\n             { form.picture.error &&\n             <div className=\"card-panel red accent-1\"> \n               {form.picture.error}  \n               </div>}\n               </div>\n               {/*pokemon name*/}\n               <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" type=\"text\" name=\"name\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.name.error} \n                  </div>} \n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" type=\"number\" name=\"hp\" className=\"form-control\" value={form.hp.value} onChange={e =>  handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.hp.error}\n                  </div>} \n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" type=\"number\" name=\"cp\" className=\"form-control\" value={form.cp.value} onChange={e =>  handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.cp.error}\n                  </div>} \n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" name=\"types\" className=\"filled-in\" value={type} disabled= {!isTypesValid(type)}checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n    )\n   }} };\n                \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}