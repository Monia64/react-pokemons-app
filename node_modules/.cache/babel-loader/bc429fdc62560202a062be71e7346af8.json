{"ast":null,"code":"export default class PokemonService {\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static getPokemon(id) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static updatePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: `PUT`,\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static deletePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static addPokemon(pokemon) {\n    delete pokemon.created;\n    return fetch(`http://localhost:3001/pokemons`, {\n      method: `POST`,\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static searchPokemon(term) {\n    return fetch(`http://localhost:3001/pokemons?q=${term}`).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}","map":{"version":3,"sources":["/home/monia/react-pokemons-app/src/services/pokemon-service.ts"],"names":["PokemonService","getPokemons","fetch","then","response","json","catch","error","handleError","getPokemon","id","data","isEmpty","updatePokemon","pokemon","method","body","JSON","stringify","headers","deletePokemon","addPokemon","created","searchPokemon","term","Object","keys","length","console"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAqB;AAElC,SAAOC,WAAP,GAAyC;AACvC,WAAOC,KAAK,CAAC,gCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP;AAGD;;AAED,SAAOE,UAAP,CAAkBC,EAAlB,EAAqD;AACnD,WAAOR,KAAK,CAAE,kCAAiCQ,EAAG,EAAtC,CAAL,CACJP,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECQ,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAqB,IAArB,GAA4BA,IAFrC,EAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AACD,SAAOM,aAAP,CAAqBC,OAArB,EAAwD;AACtD,WAAOZ,KAAK,CAAE,kCAAiCY,OAAO,CAACJ,EAAG,EAA9C,EAAiD;AAC3DK,MAAAA,MAAM,EAAG,KADkD;AAE3DC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAFsD;AAG3DK,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHkD,KAAjD,CAAL,CAKJhB,IALI,CAKCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALb,EAMJC,KANI,CAMEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANX,CAAP;AAOD;;AAED,SAAOa,aAAP,CAAqBN,OAArB,EAAmD;AACjD,WAAOZ,KAAK,CAAG,kCAAiCY,OAAO,CAACJ,EAAG,EAA/C,EAAkD;AAE9DK,MAAAA,MAAM,EAAE,QAFsD;AAG9DI,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB;AAHqD,KAAlD,CAAL,CAKRhB,IALQ,CAKHC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EALR,EAMRC,KANQ,CAMFC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANP,CAAP;AAOH;;AACD,SAAOc,UAAP,CAAkBP,OAAlB,EAAqD;AACnD,WAAOA,OAAO,CAACQ,OAAf;AACA,WAAOpB,KAAK,CAAE,gCAAF,EAAmC;AAC7Ca,MAAAA,MAAM,EAAG,MADoC;AAE7CC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAFwC;AAG7CK,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHoC,KAAnC,CAAL,CAKJhB,IALI,CAKCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALb,EAMJC,KANI,CAMEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANX,CAAP;AAOD;;AACC,SAAOgB,aAAP,CAAqBC,IAArB,EAAwD;AACtD,WAAOtB,KAAK,CAAE,oCAAmCsB,IAAK,EAA1C,CAAL,CACNrB,IADM,CACDC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADV,EAENC,KAFM,CAEAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFT,CAAP;AAGD;;AAED,SAAOK,OAAP,CAAeD,IAAf,EAAsC;AACpC,WAAOc,MAAM,CAACC,IAAP,CAAYf,IAAZ,EAAkBgB,MAAlB,KAA6B,CAApC;AACD;;AACD,SAAOnB,WAAP,CAAmBD,KAAnB,EAAsC;AAClCqB,IAAAA,OAAO,CAACrB,KAAR,CAAcA,KAAd;AACH;;AAtDiC","sourcesContent":["import Pokemon from \"../models/pokemon\";\nimport POKEMONS from \"../models/mock-pokemon\"; \nexport default class PokemonService {\n \n  static getPokemons(): Promise<Pokemon[]> {\n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n  }\n  static updatePokemon(pokemon:Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: `PUT` ,\n      body:JSON.stringify(pokemon),\n      headers: {'Content-type': 'application/json'}\n  })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n  }\n\n  static deletePokemon(pokemon:Pokemon): Promise<{}> {\n    return fetch (`http://localhost:3001/pokemons/${pokemon.id}`, {\n  \n    method: 'DELETE',\n    headers: {'Content-type':'application/json' }\n  })\n  .then(response =>response.json())\n  .catch(error => this.handleError(error));\n}\nstatic addPokemon(pokemon:Pokemon): Promise<Pokemon> {\n  delete pokemon.created;\n  return fetch(`http://localhost:3001/pokemons`, {\n    method: `POST` ,\n    body:JSON.stringify(pokemon),\n    headers: {'Content-type': 'application/json'}\n})\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n}\n  static searchPokemon(term: string) : Promise<Pokemon[]> {\n    return fetch(`http://localhost:3001/pokemons?q=${term}`)\n    .then(response=> response.json())\n    .catch(error => this.handleError(error));\n  }\n \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n  static handleError(error: Error): void{\n      console.error(error);\n  }\n}"]},"metadata":{},"sourceType":"module"}